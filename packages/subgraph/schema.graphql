type Project @entity {
  id: ID!
  handle: String!
  creator: Bytes!
  createdAt: BigInt!
  uri: String
  totalPaid: BigInt!
  totalRedeemed: BigInt!
  currentBalance: BigInt!
  payers: [PayerReport!]! @derivedFrom(field: "project")
  payEvents: [PayEvent!]! @derivedFrom(field: "project")
  printPremineEvents: [PrintPremineEvent!]! @derivedFrom(field: "project")
  tapEvents: [TapEvent!]! @derivedFrom(field: "project")
  redeemEvents: [RedeemEvent!]! @derivedFrom(field: "project")
  printReservesEvents: [PrintReservesEvent!]! @derivedFrom(field: "project")
  configureEvents: [ConfigureEvent!]! @derivedFrom(field: "project")
}

type PayerReport @entity {
  id: ID!
  project: Project!
  payer: Bytes!
  totalPaid: BigInt!
  totalTokensReceived: BigInt!
  lastPaidTimestamp: BigInt!
}

type PayEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  caller: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  note: String
  timestamp: BigInt!
  txHash: Bytes!
}

type PrintPremineEvent @entity {
  id: ID!
  project: Project!
  beneficiary: Bytes!
  amount: BigInt!
  currency: BigInt!
  memo: String
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}

type TapEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  beneficiary: Bytes!
  amount: BigInt!
  currency: BigInt!
  netTransferAmount: BigInt!
  beneficiaryTransferAmount: BigInt!
  govFeeAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}

type RedeemEvent @entity {
  id: ID!
  project: Project!
  holder: Bytes!
  beneficiary: Bytes!
  amount: BigInt!
  returnAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}

type PrintReservesEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  beneficiary: Bytes!
  count: BigInt!
  beneficiaryTicketAmount: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}

type ConfigureEvent @entity {
  id: ID!
  project: Project!
  fundingCycleId: BigInt!
  caller: Bytes!
  timestamp: BigInt!
  txHash: Bytes!
}
